#!/usr/bin/env python3
"""
IMEI Registry - sleduje a ukl√°d√° informace o v≈°ech Teltonika za≈ô√≠zen√≠ch
"""

import json
import os
from datetime import datetime
from typing import Dict, Optional, List

class IMEIRegistry:
    def __init__(self, registry_path: str):
        self.registry_path = registry_path
        self.registry = self._load_registry()
    
    def _load_registry(self) -> Dict:
        """Naƒçte IMEI registr ze souboru"""
        try:
            if os.path.exists(self.registry_path):
                with open(self.registry_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"Chyba p≈ôi naƒç√≠t√°n√≠ IMEI registru: {e}")
        return {}
    
    def _save_registry(self):
        """Ulo≈æ√≠ IMEI registr do souboru"""
        try:
            # Zajisti, ≈æe slo≈æka existuje
            os.makedirs(os.path.dirname(self.registry_path), exist_ok=True)
            
            with open(self.registry_path, 'w', encoding='utf-8') as f:
                json.dump(self.registry, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"Chyba p≈ôi ukl√°d√°n√≠ IMEI registru: {e}")
    
    def register_imei_connection(self, imei: str, ip_address: str) -> bool:
        """
        Zaregistruje nov√© p≈ôipojen√≠ IMEI za≈ô√≠zen√≠
        Returns: True pokud je IMEI nov√©, False pokud u≈æ existuje
        """
        now = datetime.now().isoformat()
        is_new_imei = imei not in self.registry
        
        if is_new_imei:
            # Nov√© IMEI
            self.registry[imei] = {
                "first_seen": now,
                "last_seen": now,
                "total_connections": 1,
                "total_records": 0,
                "ip_addresses": [ip_address],
                "last_ip": ip_address,
                "device_info": {
                    "model": "unknown",
                    "firmware": "unknown"
                }
            }
            print(f"üì± Nov√© IMEI za≈ô√≠zen√≠ registrov√°no: {imei}")
        else:
            # Existuj√≠c√≠ IMEI - aktualizuj
            entry = self.registry[imei]
            entry["last_seen"] = now
            entry["total_connections"] += 1
            entry["last_ip"] = ip_address
            
            # P≈ôidej IP do seznamu pokud nen√≠
            if ip_address not in entry["ip_addresses"]:
                entry["ip_addresses"].append(ip_address)
                # Omez seznam na posledn√≠ch 10 IP adres
                entry["ip_addresses"] = entry["ip_addresses"][-10:]
        
        self._save_registry()
        return is_new_imei
    
    def register_avl_records(self, imei: str, record_count: int):
        """Zaregistruje poƒçet p≈ôijat√Ωch AVL z√°znam≈Ø"""
        if imei in self.registry:
            self.registry[imei]["total_records"] += record_count
            self.registry[imei]["last_seen"] = datetime.now().isoformat()
            self._save_registry()
    
    def get_imei_info(self, imei: str) -> Optional[Dict]:
        """Vr√°t√≠ informace o IMEI za≈ô√≠zen√≠"""
        return self.registry.get(imei)
    
    def get_all_imeis(self) -> List[str]:
        """Vr√°t√≠ seznam v≈°ech zn√°m√Ωch IMEI"""
        return list(self.registry.keys())
    
    def get_registry_stats(self) -> Dict:
        """Vr√°t√≠ statistiky registru"""
        if not self.registry:
            return {
                "total_devices": 0,
                "total_connections": 0,
                "total_records": 0
            }
        
        total_connections = sum(entry["total_connections"] for entry in self.registry.values())
        total_records = sum(entry["total_records"] for entry in self.registry.values())
        
        return {
            "total_devices": len(self.registry),
            "total_connections": total_connections,
            "total_records": total_records,
            "devices": list(self.registry.keys())
        }
    
    def is_imei_allowed(self, imei: str, allowed_list: List[str]) -> bool:
        """
        Zkontroluje, zda je IMEI povoleno
        Pokud je seznam pr√°zdn√Ω, v≈°echny IMEI jsou povoleny
        """
        if not allowed_list:
            return True
        return imei in allowed_list
    
    def format_registry_summary(self) -> str:
        """Vr√°t√≠ textov√Ω p≈ôehled registru"""
        if not self.registry:
            return "≈Ω√°dn√° IMEI za≈ô√≠zen√≠ zat√≠m nebyla registrov√°na."
        
        summary = f"IMEI Registry - Celkem {len(self.registry)} za≈ô√≠zen√≠:\n\n"
        
        for imei, info in self.registry.items():
            first_seen = datetime.fromisoformat(info["first_seen"]).strftime("%Y-%m-%d %H:%M:%S")
            last_seen = datetime.fromisoformat(info["last_seen"]).strftime("%Y-%m-%d %H:%M:%S") 
            
            summary += f"IMEI: {imei}\n"
            summary += f"  ‚Ä¢ Prvn√≠ p≈ôipojen√≠: {first_seen}\n"
            summary += f"  ‚Ä¢ Posledn√≠ aktivita: {last_seen}\n" 
            summary += f"  ‚Ä¢ Celkem p≈ôipojen√≠: {info['total_connections']}\n"
            summary += f"  ‚Ä¢ Celkem z√°znam≈Ø: {info['total_records']}\n"
            summary += f"  ‚Ä¢ Posledn√≠ IP: {info['last_ip']}\n"
            summary += f"  ‚Ä¢ V≈°echny IP: {', '.join(info['ip_addresses'])}\n\n"
        
        return summary